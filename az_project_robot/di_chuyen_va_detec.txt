    def move_to_target(servo_1, servo_2, deviation_x, deviation_y, target_angle_1, target_angle_2)
        lost_time = 0  # Reset thời gian khi tìm thấy đối tượng
        servo_1.tracking_servo_bottom(deviation_x, target_angle_1)
        servo_2.tracking_servo_bottom(deviation_y, target_angle_2)
        if front_distance > 15:
        # Kiểm tra điều kiện di chuyển
            if  51 < target_angle_1 < 69 and abs(deviation_x) < 10:
                set_motors_direction('go_forward', vx, vy, 0)
            else:
                print("Servo 1 chưa ổn định, chờ thêm.")
        elif front_distance < 15:
            set_motors_direction('stop', vx, vy, 0)
        # Kiểm tra và quay robot nếu cần
        if abs(deviation_x) > 40:
            if right_distance > 15 and left_distance > 15:
                go_right_or_left(target_angle_1, vx, vy, DEFAULT_ANGLE, 4)
            elif 20 > abs(deviation_x) < 40:
                rotate_robot(target_angle_1, vx, vy, DEFAULT_ANGLE, 4)


# Nếu phát hiện đối tượng
    if status_black:
        if abs(deviation_x_black) or abs(deviation_y_black) < 180:
            set_motors_direction('rotate_left', 0.1, 0.1, 0)
        if deviation_y_black > 30 and deviation_x_black == 0:
            set_motors_direction('rotate_right', 0.1, 0.1, 0)
    if not status_black:
        avoid_obtacles()
        if status_water:
            move_to_target()
        else:
            time+=1
            if time = 30:
                new_angle_1, new_angle_2 = search_for_object(servo_1, servo_2, frame_queue)
                if new_angle_1 is not None and new_angle_2 is not None:
                    target_angle_1 = new_angle_1
                    target_angle_2 = new_angle_2


def search_for_object(self, num_turns=4, step_angle=30, start_angle_1=0, start_angle_2=90):
        """
        Tìm kiếm đối tượng bằng cách quay servo xung quanh từ góc khởi đầu đến góc tối đa.
        """
        print("Bắt đầu tìm kiếm vật thể...")
        
        target_angle_1 = start_angle_1
        target_angle_2 = start_angle_2

        MAX_ANGLE = 120  # Giới hạn góc tối đa
        MIN_ANGLE = 0    # Giới hạn góc tối thiểu
        for turn in range(num_turns):
            print(f"Vòng tìm kiếm {turn + 1}/{num_turns} ở góc {target_angle_1} độ.")

            # Quay servo đến góc hiện tại
            self.bottom_servo.move_to_angle(target_angle_1)
            self.top_servo.move_to_angle(target_angle_2)
            sleep(1)  # Chờ một chút để servo ổn định

            # Kiểm tra có phát hiện đối tượng không từ frame_queue
            if not self.frame_queue.empty():
                status, _, _, _ = self.frame_queue.get()  # Lấy thông tin từ hàng đợi
                if status:
                    print("Đối tượng đã được phát hiện.")
                    return target_angle_1, target_angle_2  # Trả về góc của servo

            # Cập nhật góc quay
            target_angle_1 += step_angle

            # Giới hạn góc quay
            if target_angle_1 > MAX_ANGLE:
                target_angle_1 = MIN_ANGLE  # Reset về góc tối thiểu nếu vượt quá tối đa

        print("Không phát hiện được đối tượng trong vòng tìm kiếm.")
        return None, None  # Không tìm thấy đối tượng

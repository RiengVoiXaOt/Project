    def move_to_target(servo_1, servo_2, deviation_x, deviation_y, target_angle_1, target_angle_2)
        lost_time = 0  # Reset thời gian khi tìm thấy đối tượng
        servo_1.tracking_servo_bottom(deviation_x, target_angle_1)
        servo_2.tracking_servo_bottom(deviation_y, target_angle_2)
        if front_distance > 15:
        # Kiểm tra điều kiện di chuyển
            if  51 < target_angle_1 < 69 and abs(deviation_x) < 10:
                set_motors_direction('go_forward', vx, vy, 0)
            else:
                print("Servo 1 chưa ổn định, chờ thêm.")
        elif front_distance < 15:
            set_motors_direction('stop', vx, vy, 0)
        # Kiểm tra và quay robot nếu cần
        if abs(deviation_x) > 40:
            if right_distance > 15 and left_distance > 15:
                go_right_or_left(target_angle_1, vx, vy, DEFAULT_ANGLE, 4)
            elif 20 > abs(deviation_x) < 40:
                rotate_robot(target_angle_1, vx, vy, DEFAULT_ANGLE, 4)


# Nếu phát hiện đối tượng
    if status_black:
        if abs(deviation_x_black) or abs(deviation_y_black) < 180:
            set_motors_direction('rotate_left', 0.1, 0.1, 0)
        if deviation_y_black > 30 and deviation_x_black == 0:
            set_motors_direction('rotate_right', 0.1, 0.1, 0)
    if not status_black:
        avoid_obtacles()
        if status_water:
            move_to_target()
        else:
            time+=1
            if time = 30:
                new_angle_1, new_angle_2 = search_for_object(servo_1, servo_2, frame_queue)
                if new_angle_1 is not None and new_angle_2 is not None:
                    target_angle_1 = new_angle_1
                    target_angle_2 = new_angle_2


def search_for_object(self, num_turns=4, step_angle=30, start_angle_1=0, start_angle_2=90):
        """
        Tìm kiếm đối tượng bằng cách quay servo xung quanh từ góc khởi đầu đến góc tối đa.
        """
        print("Bắt đầu tìm kiếm vật thể...")
        
        target_angle_1 = start_angle_1
        target_angle_2 = start_angle_2

        MAX_ANGLE = 120  # Giới hạn góc tối đa
        MIN_ANGLE = 0    # Giới hạn góc tối thiểu
        for turn in range(num_turns):
            print(f"Vòng tìm kiếm {turn + 1}/{num_turns} ở góc {target_angle_1} độ.")

            # Quay servo đến góc hiện tại
            self.bottom_servo.move_to_angle(target_angle_1)
            self.top_servo.move_to_angle(target_angle_2)
            sleep(1)  # Chờ một chút để servo ổn định

            # Kiểm tra có phát hiện đối tượng không từ frame_queue
            if not self.frame_queue.empty():
                status, _, _, _ = self.frame_queue.get()  # Lấy thông tin từ hàng đợi
                if status:
                    print("Đối tượng đã được phát hiện.")
                    return target_angle_1, target_angle_2  # Trả về góc của servo

            # Cập nhật góc quay
            target_angle_1 += step_angle

            # Giới hạn góc quay
            if target_angle_1 > MAX_ANGLE:
                target_angle_1 = MIN_ANGLE  # Reset về góc tối thiểu nếu vượt quá tối đa

        print("Không phát hiện được đối tượng trong vòng tìm kiếm.")
        return None, None  # Không tìm thấy đối tượng





def move_to_target(self, deviation_x, deviation_y, target_angle_bottom, target_angle_top, front_distance):
        self.update_state("Đang tracking và di chuyển đến gần đối tượng")
        # Điều chỉnh servo để theo dõi mục tiêu
        self.tracking_servo_bottom(deviation_x, target_angle_bottom)
        self.tracking_servo_top(deviation_y, target_angle_top)

        # Kiểm tra khoảng cách phía trước để xác định hành động
        if front_distance > 15:
            if 51 < target_angle_bottom < 69 and abs(deviation_x) <= 10:
                set_motors_direction('go_forward', self.vx, self.vy, 0)
                self.update_state("moving forward")
        else:
            set_motors_direction('stop', self.vx, self.vy, 0)
            self.update_state("stop and watering")
            self.relay_control.run_relay_for_duration()

        if abs(deviation_x) > 15:
            self.tracking_rotate_robot(target_angle_bottom, self.DEFAULT_ANGLE_BOTTOM, 4)
            self.update_state("rotating to target")



def tracking_servo_bottom(self, deviation_x, target_angle):
        if deviation_x < -10 and target_angle < self.MAX_ANGLE:
            target_angle += 1
            self.bottom_servo.move_to_angle(target_angle)
        elif deviation_x > 10 and target_angle > self.MIN_ANGLE:
            target_angle -= 1
            self.bottom_servo.move_to_angle(target_angle)

    def tracking_servo_top(self, deviation_y, target_angle):
        if deviation_y < -10 and target_angle > self.MIN_ANGLE:
            target_angle -= 1
            self.top_servo.move_to_angle(target_angle)
        elif deviation_y > 10 and target_angle < self.MAX_ANGLE:
            target_angle += 1
            self.top_servo.move_to_angle(target_angle)
    def tracking_rotate_robot(self, target_angle, default_angle, angle):
        if target_angle < default_angle - angle:
            set_motors_direction('rotate_right', 0.1, 0.1, 0)
        elif target_angle > default_angle + angle:
            set_motors_direction('rotate_left', 0.1, 0.1, 0)

def search_for_object(self, start_angle_bottom, start_angle_top, step_angle, num_turns, n):
        """Tìm kiếm đối tượng bằng cách quay servo."""
        target_angle_bottom = start_angle_bottom
        target_angle_top = start_angle_top

        MAX_ANGLE = 120  # Giới hạn góc tối đa
        MIN_ANGLE = 0    # Giới hạn góc tối thiểu

        for turn in range(num_turns):
            print(f"Vòng tìm kiếm {turn + 1}/{num_turns} ở góc {target_angle_bottom} độ.")

            # Quay servo đến góc hiện tại
            self.bottom_servo.move_to_angle(target_angle_bottom)
            self.top_servo.move_to_angle(target_angle_top)
            sleep(1)  # Chờ một chút để servo ổn định

            # Kiểm tra có phát hiện đối tượng không từ frame_queue
            if not self.frame_queue.empty():
                frame_data = self.frame_queue.get()  # Lấy thông tin từ hàng đợi
                status = frame_data[n]  # Giả sử status là phần tử thứ 4 trong tuple

                if status:
                    print("Đối tượng đã được phát hiện.")
                    return target_angle_bottom, target_angle_top  # Trả về góc của servo

            # Cập nhật góc quay
            target_angle_bottom += step_angle

            # Giới hạn góc quay
            if target_angle_bottom > MAX_ANGLE:
                target_angle_bottom = MIN_ANGLE  # Reset về góc tối thiểu nếu vượt quá tối đa

        print("Không phát hiện được đối tượng trong vòng tìm kiếm.")
        return None, None  # Không tìm thấy đối tượng



    def automatic_mode(self):
        try:
            while not self.stop_event.is_set():  # Vòng lặp chạy khi không dừng và không ở chế độ thủ công
                self.daily_reset_check()
                if not self.manual_mode:
                    current_time = time()
                    if not self.frame_queue.empty():
                        frame_dict = self.process_frame()  # Xử lý khung hình từ hàng đợi
                        self.process_results()
                        
                        # if frame_object is not None:
                        #     cv2.imshow("object detection", frame_object)
                        #     cv2.waitKey(1)
                        
                        # if self.check_battery_and_time():
                            #Thực hiện nhiệm cụ tưới cây
                            # if self.mission:
                            #     self.check_daily_mission()
                            #     if self.is_resting:
                            #         self.left_charger()
                            #     else:
                            #         self.handle_yellow_line(status_yellow, deviation_x_yellow, deviation_y_yellow)
                            #         if status_water:
                            #             last_detection_time = current_time  # Đặt lại thời gian phát hiện
                            #             self.move_to_target(deviation_x_water, deviation_y_water, front_distance)
                            #         elif not status_water:
                            #             self.avoid_and_navigate(front_distance, left_distance, right_distance,front_left_distance,front_right_distance)
                            #         elif current_time - last_detection_time >= search_interval:  # Gọi hàm tìm kiếm
                            #             last_detection_time = current_time  # Đặt lại thời gian phát hiện
                            # else:
                            
                        # if not self.is_resting:
                        #     self.handle_yellow_line(status_yellow, deviation_x_yellow, deviation_y_yellow, left_distance, right_distance )
                        #     if not status_yellow:
                        #         self.red_line_following(contours_red)
                        #         if not status_red and not status_charger:
                        #             self.avoid_and_navigate(front_distance, left_distance, right_distance, front_left_distance, front_right_distance)
                        #         if status_charger:
                        #             set_motors_direction("stop", self.vx, self.vy, 0)
                        #             sleep(0.1)
                        #             if front_distance < 20 and status_charger:
                        #                 self.rest_in_charger(front_distance)
                        # else:
                        #     self.rest_in_charger(front_distance)
                        
                        
                        # else:
                        #     #Tìm đường về trạm sạc
                        #     if not self.is_resting:
                        #         self.handle_yellow_line(status_yellow, deviation_x_yellow, deviation_y_yellow)
                        #         if not status_yellow:
                        #             self.red_line_following(contours_red)
                        #             if not status_red and not status_charger:
                        #                 self.avoid_and_navigate(front_distance, left_distance, right_distance,front_left_distance,front_right_distance)
                        #             if status_charger:
                        #                 set_motors_direction("stop", 0.1, 0.1, 0)
                        #                 sleep(0.05)
                        #                 if front_distance < 25 and status_charger:
                        #                     self.rest_in_charger(front_distance)
                        #     else:
                        #         self.rest_in_charger(front_distance)
                    sleep(0.05) 
                    
                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        self.stop_event.set()
                        break
                else:
                    self.update_state("Chuyển sang chế độ thủ công. Thoát khỏi tự động.")
                    self.update_state("Automatic exited")
                    break  # Thoát khỏi vòng lặp nếu chuyển sang chế độ thủ công

                # Thêm log để theo dõi trạng thái
                print(f"Manual Mode: {self.manual_mode}, Stop Event: {self.stop_event.is_set()}")
                
            color_thread.join()
            object_thread.join()

            sleep(0.1)  # Thêm thời gian nghỉ để giảm tải CPU
        except Exception as e:
            print(f"Error in automatic mode: {e}")
            
        finally:
            self.stop_event.set()  # Đặt cờ dừng
            if 'videostream' in locals():
                self.videostream.stop()  # Dừng video stream
            cv2.destroyAllWindows()  # Đóng tất cả cửa sổ OpenCV